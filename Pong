# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400
HALF_WIDTH = WIDTH / 2
HALF_HEIGHT = HEIGHT / 2
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [HALF_WIDTH, HALF_HEIGHT]
ball_vel = []

right = 0

paddle1_pos = float(HALF_HEIGHT)
paddle2_pos = float(HALF_HEIGHT)
paddle1_vel = float(0)
paddle2_vel = float(0)

score1 = int(0)
score2 = int(0)

key_hit = ""

# helper function that spawns a ball, returns a position vector and a velocity vector
# if right is True, spawn to the right, else spawn to the left
def ball_init(right):
    global ball_pos, ball_vel  # these are vectors stored as lists
    HOR_VEL = random.randrange(120, 240) / 60
    VERT_VEL = random.randrange(60, 180) / 60
    
    ball_pos = [HALF_WIDTH, HALF_HEIGHT] 
    
    if right == True:
        ball_vel = [HOR_VEL, -VERT_VEL]
        ball_pos[0] = ball_pos[0] + ball_vel[0]
    else:
        ball_vel = [-HOR_VEL, -VERT_VEL]
        ball_pos[1] = ball_pos[1] + ball_vel[1]
    pass

# define event handlers
def init():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, right  # these are floats
    global score1, score2  # these are ints
    
    ball_pos = [HALF_WIDTH, HALF_HEIGHT]
    ball_vel = []
    right = random.choice ([True, False])
    paddle1_pos = float(HALF_HEIGHT)
    paddle2_pos = float(HALF_HEIGHT)
    paddle1_vel = float(0)
    paddle2_vel = float(0)

    score1 = int(0)
    score2 = int(0)
    
    ball_init(right)
    
    pass

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, key_hit, paddle1_vel, paddle2_vel
 
    # update paddle's vertical position, keep paddle on the screen
    
    if paddle1_pos < HALF_PAD_HEIGHT + 1 and key_hit == "w":
        paddle1_vel = 0
        paddle1_pos += paddle1_vel
    elif paddle1_pos > (HEIGHT - HALF_PAD_HEIGHT - 1) and key_hit == "s":
        paddle1_vel = 0
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos += paddle1_vel
    
    if paddle2_pos <= HALF_PAD_HEIGHT and key_hit == "up":
        paddle2_vel = 0
        paddle2_pos += paddle2_vel
    elif paddle2_pos >= (HEIGHT - HALF_PAD_HEIGHT) and key_hit == "down":
        paddle2_vel = 0
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos += paddle2_vel
    
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    c.draw_polygon([(0, (paddle1_pos + HALF_PAD_HEIGHT)), (PAD_WIDTH, (paddle1_pos + HALF_PAD_HEIGHT)), (PAD_WIDTH, (paddle1_pos - HALF_PAD_HEIGHT)), (0, (paddle1_pos - HALF_PAD_HEIGHT))], 1, "White", "White")
    c.draw_polygon([((WIDTH - PAD_WIDTH), (paddle2_pos + HALF_PAD_HEIGHT)), (WIDTH, (paddle2_pos + HALF_PAD_HEIGHT)), (WIDTH, (paddle2_pos - HALF_PAD_HEIGHT)), ((WIDTH - PAD_WIDTH), (paddle2_pos - HALF_PAD_HEIGHT))], 1, "White", "White")
    
    # update ball
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] = - ball_vel[1]
            
    
    if (ball_pos[0] - BALL_RADIUS) <= PAD_WIDTH + 1:
        if ball_pos[1] <= (paddle1_pos + HALF_PAD_HEIGHT) and ball_pos[1] >= (paddle1_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = - ball_vel[0] * 1.1
        elif ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
            ball_vel = [0, 0]
            score2 = score2 + 1
            ball_init(True)
            
    elif (ball_pos[0] + BALL_RADIUS) >= (WIDTH - PAD_WIDTH - 1):
        if ball_pos[1] <= (paddle2_pos + HALF_PAD_HEIGHT + 1) and ball_pos[1] >= (paddle2_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = - ball_vel[0] * 1.1
        elif ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):
            ball_vel = [0, 0]
            score1 = score1 + 1
            ball_init(False)   

            
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # draw ball and scores
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    c.draw_text(str(score1), (75, 20), 16, "Red")
    c.draw_text(str(score2), (500, 20), 16, "Blue")
    
def keydown(key):
    global paddle1_vel, paddle2_vel, key_hit
    
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 2
        key_hit = "down"
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 2
        key_hit = "s"
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -2
        key_hit = "up"
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -2
        key_hit = "w"
        
def keyup(key):
    global paddle1_vel, paddle2_vel, key_hit
    key_hit = ""
    paddle1_vel = 0
    paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", init, 100)


# start frame
init()
frame.start()

